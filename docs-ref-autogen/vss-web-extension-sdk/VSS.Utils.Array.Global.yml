### YamlMime:UniversalReference
items:
  - uid: vss-web-extension-sdk.VSS.Utils.Array.Global
    package: vss-web-extension-sdk
    name: Global
    module: VSS/Utils/Array
    children:
      - vss-web-extension-sdk.VSS.Utils.Array.add
      - vss-web-extension-sdk.VSS.Utils.Array.addRange
      - vss-web-extension-sdk.VSS.Utils.Array.arrayContains
      - vss-web-extension-sdk.VSS.Utils.Array.arrayEquals
      - vss-web-extension-sdk.VSS.Utils.Array.clear
      - vss-web-extension-sdk.VSS.Utils.Array.clone
      - vss-web-extension-sdk.VSS.Utils.Array.contains
      - vss-web-extension-sdk.VSS.Utils.Array.copySortFlag
      - vss-web-extension-sdk.VSS.Utils.Array.findIndex
      - vss-web-extension-sdk.VSS.Utils.Array.first
      - vss-web-extension-sdk.VSS.Utils.Array.flagSorted
      - vss-web-extension-sdk.VSS.Utils.Array.indexOf
      - vss-web-extension-sdk.VSS.Utils.Array.intersect
      - vss-web-extension-sdk.VSS.Utils.Array.intersectPrimitives
      - vss-web-extension-sdk.VSS.Utils.Array.intersectUniqueSorted
      - vss-web-extension-sdk.VSS.Utils.Array.isSorted
      - vss-web-extension-sdk.VSS.Utils.Array.remove
      - vss-web-extension-sdk.VSS.Utils.Array.removeAllIndexes
      - vss-web-extension-sdk.VSS.Utils.Array.removeAtIndex
      - vss-web-extension-sdk.VSS.Utils.Array.removeWhere
      - vss-web-extension-sdk.VSS.Utils.Array.reorder
      - vss-web-extension-sdk.VSS.Utils.Array.shallowEquals
      - vss-web-extension-sdk.VSS.Utils.Array.sortIfNotSorted
      - vss-web-extension-sdk.VSS.Utils.Array.subtract
      - vss-web-extension-sdk.VSS.Utils.Array.toDictionary
      - vss-web-extension-sdk.VSS.Utils.Array.union
      - vss-web-extension-sdk.VSS.Utils.Array.unique
      - vss-web-extension-sdk.VSS.Utils.Array.uniqueSort
    type: package
    langs:
      - typeScript
  - uid: vss-web-extension-sdk.VSS.Utils.Array.add
    name: add
    children: []
    type: function
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function add<T>(array: T[], item: T)'
      parameters:
        - id: array
          type:
            - 'T[]'
          description: ''
        - id: item
          type:
            - T
          description: |+

    module: VSS/Utils/Array
  - uid: vss-web-extension-sdk.VSS.Utils.Array.addRange
    name: addRange
    children: []
    type: function
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function addRange<T>(array: T[], items: T[])'
      parameters:
        - id: array
          type:
            - 'T[]'
          description: ''
        - id: items
          type:
            - 'T[]'
          description: |+

    module: VSS/Utils/Array
  - uid: vss-web-extension-sdk.VSS.Utils.Array.arrayContains
    name: arrayContains
    children: []
    type: function
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function arrayContains<S>(value: S, target: T[], comparer?: (s: S, t: T)
        => boolean)
      parameters:
        - id: value
          type:
            - S
          description: ''
        - id: target
          type:
            - 'T[]'
          description: ''
        - id: comparer
          type:
            - '(s: S, t: T) => boolean'
          description: ''
          optional: true
      return:
        type:
          - boolean
    module: VSS/Utils/Array
  - uid: vss-web-extension-sdk.VSS.Utils.Array.arrayEquals
    name: arrayEquals
    children: []
    type: function
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function arrayEquals<S>(source: S[], target: T[], comparer?: (s: S, t:
        T) => boolean, nullResult?: boolean, sorted?: boolean)
      parameters:
        - id: source
          type:
            - 'S[]'
          description: ''
        - id: target
          type:
            - 'T[]'
          description: ''
        - id: comparer
          type:
            - '(s: S, t: T) => boolean'
          description: ''
          optional: true
        - id: nullResult
          type:
            - boolean
          description: ''
          optional: true
        - id: sorted
          type:
            - boolean
          description: ''
          optional: true
      return:
        type:
          - boolean
    module: VSS/Utils/Array
  - uid: vss-web-extension-sdk.VSS.Utils.Array.clear
    name: clear
    children: []
    type: function
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function clear<T>(array: T[])'
      parameters:
        - id: array
          type:
            - 'T[]'
          description: |+

    module: VSS/Utils/Array
  - uid: vss-web-extension-sdk.VSS.Utils.Array.clone
    name: clone
    children: []
    type: function
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function clone<T>(array: T[])'
      parameters:
        - id: array
          type:
            - 'T[]'
          description: ''
    module: VSS/Utils/Array
  - uid: vss-web-extension-sdk.VSS.Utils.Array.contains
    name: contains
    children: []
    type: function
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function contains<T>(array: T[], value: T, comparer?: IComparer<any>)'
      parameters:
        - id: array
          type:
            - 'T[]'
          description: ''
        - id: value
          type:
            - T
          description: ''
        - id: comparer
          type:
            - '@vss-web-extension-sdk.IComparer<any>'
          description: ''
          optional: true
      return:
        type:
          - boolean
    module: VSS/Utils/Array
  - uid: vss-web-extension-sdk.VSS.Utils.Array.copySortFlag
    name: copySortFlag
    children: []
    type: function
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function copySortFlag<T>(toArray: T[], fromArray: T[])'
      parameters:
        - id: toArray
          type:
            - 'T[]'
          description: ''
        - id: fromArray
          type:
            - 'T[]'
          description: ''
    module: VSS/Utils/Array
  - uid: vss-web-extension-sdk.VSS.Utils.Array.findIndex
    name: findIndex
    children: []
    type: function
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function findIndex<T>(array: T[], predicate: IFunctionPR<T>)'
      parameters:
        - id: array
          type:
            - 'T[]'
          description: ''
        - id: predicate
          type:
            - '@vss-web-extension-sdk.IFunctionPR<T>'
          description: ''
      return:
        type:
          - number
    module: VSS/Utils/Array
  - uid: vss-web-extension-sdk.VSS.Utils.Array.first
    name: first
    children: []
    type: function
    langs:
      - typeScript
    summary: Returns the first element of an array that matches the predicate.
    syntax:
      content: 'function first<T>(array: T[], predicate?: (value: T) => boolean)'
      parameters:
        - id: array
          type:
            - 'T[]'
          description: Array used to perform predicate.
        - id: predicate
          type:
            - '(value: T) => boolean'
          description: The Predicate function.
          optional: true
      return:
        type:
          - T
    module: VSS/Utils/Array
  - uid: vss-web-extension-sdk.VSS.Utils.Array.flagSorted
    name: flagSorted
    children: []
    type: function
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function flagSorted<T>(array: T[], comparer: IComparer<T>)'
      parameters:
        - id: array
          type:
            - 'T[]'
          description: ''
        - id: comparer
          type:
            - '@vss-web-extension-sdk.IComparer<T>'
          description: ''
    module: VSS/Utils/Array
  - uid: vss-web-extension-sdk.VSS.Utils.Array.indexOf
    name: indexOf
    children: []
    type: function
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function indexOf<T>(array: T[], item: T)'
      parameters:
        - id: array
          type:
            - 'T[]'
          description: ''
        - id: item
          type:
            - T
          description: ''
      return:
        type:
          - number
    module: VSS/Utils/Array
  - uid: vss-web-extension-sdk.VSS.Utils.Array.intersect
    name: intersect
    children: []
    type: function
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function intersect<T>(arrayA: T[], arrayB: T[], comparer?: IComparer<T>)'
      parameters:
        - id: arrayA
          type:
            - 'T[]'
          description: ''
        - id: arrayB
          type:
            - 'T[]'
          description: ''
        - id: comparer
          type:
            - '@vss-web-extension-sdk.IComparer<T>'
          description: ''
          optional: true
    module: VSS/Utils/Array
  - uid: vss-web-extension-sdk.VSS.Utils.Array.intersectPrimitives
    name: intersectPrimitives
    children: []
    type: function
    langs:
      - typeScript
    summary: Helper method used to intersect arrays of strings or numbers
    syntax:
      content: >-
        function intersectPrimitives<T>(arrayA: T[], arrayB: T[],
        caseInsensitive?: boolean)
      parameters:
        - id: arrayA
          type:
            - 'T[]'
          description: ''
        - id: arrayB
          type:
            - 'T[]'
          description: ''
        - id: caseInsensitive
          type:
            - boolean
          description: ''
          optional: true
    module: VSS/Utils/Array
  - uid: vss-web-extension-sdk.VSS.Utils.Array.intersectUniqueSorted
    name: intersectUniqueSorted
    children: []
    type: function
    langs:
      - typeScript
    summary: >-
      Returns an array which is the sorted intersection of values between two
      other arrays.

      This function is optimized to work only with sorted arrays with unique
      values.
    syntax:
      content: >-
        function intersectUniqueSorted<T>(sortedUniqueArray1: T[],
        sortedUniqueArray2: T[], comparer?: IComparer<T>)
      parameters:
        - id: sortedUniqueArray1
          type:
            - 'T[]'
          description: >-
            Input array - which must already be sorted and only contain unique
            values
        - id: sortedUniqueArray2
          type:
            - 'T[]'
          description: >-
            Input array - which must already be sorted and only contain unique
            values
        - id: comparer
          type:
            - '@vss-web-extension-sdk.IComparer<T>'
          description: A comparer for values of type T
          optional: true
    module: VSS/Utils/Array
  - uid: vss-web-extension-sdk.VSS.Utils.Array.isSorted
    name: isSorted
    children: []
    type: function
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function isSorted<T>(array: T[], comparer: IComparer<T>)'
      parameters:
        - id: array
          type:
            - 'T[]'
          description: ''
        - id: comparer
          type:
            - '@vss-web-extension-sdk.IComparer<T>'
          description: ''
      return:
        type:
          - boolean
    module: VSS/Utils/Array
  - uid: vss-web-extension-sdk.VSS.Utils.Array.remove
    name: remove
    children: []
    type: function
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function remove<T>(array: T[], item: T)'
      parameters:
        - id: array
          type:
            - 'T[]'
          description: ''
        - id: item
          type:
            - T
          description: ''
      return:
        type:
          - boolean
    module: VSS/Utils/Array
  - uid: vss-web-extension-sdk.VSS.Utils.Array.removeAllIndexes
    name: removeAllIndexes
    children: []
    type: function
    langs:
      - typeScript
    summary: Removes all of the given indexes from array
    syntax:
      content: 'function removeAllIndexes<T>(array: T[], indexes: number[])'
      parameters:
        - id: array
          type:
            - 'T[]'
          description: ''
        - id: indexes
          type:
            - 'number[]'
          description: ''
      return:
        type:
          - boolean
    module: VSS/Utils/Array
  - uid: vss-web-extension-sdk.VSS.Utils.Array.removeAtIndex
    name: removeAtIndex
    children: []
    type: function
    langs:
      - typeScript
    summary: Removes the given index from the array
    syntax:
      content: 'function removeAtIndex<T>(array: T[], index: number)'
      parameters:
        - id: array
          type:
            - 'T[]'
          description: ''
        - id: index
          type:
            - number
          description: ''
      return:
        type:
          - boolean
    module: VSS/Utils/Array
  - uid: vss-web-extension-sdk.VSS.Utils.Array.removeWhere
    name: removeWhere
    children: []
    type: function
    langs:
      - typeScript
    summary: Remove items from array that satisfy the predicate.
    syntax:
      content: >-
        function removeWhere<T>(array: T[], predicate: (element: T) => boolean,
        count?: number, startAt?: number)
      parameters:
        - id: array
          type:
            - 'T[]'
          description: ''
        - id: predicate
          type:
            - '(element: T) => boolean'
          description: |+

        - id: count
          type:
            - number
          description: ''
          optional: true
        - id: startAt
          type:
            - number
          description: ''
          optional: true
    module: VSS/Utils/Array
  - uid: vss-web-extension-sdk.VSS.Utils.Array.reorder
    name: reorder
    children: []
    type: function
    langs:
      - typeScript
    summary: >-
      Reorders an array by moving oldIndex + the "count" next elements to the
      newIndex in the array
    syntax:
      content: >-
        function reorder<T>(array: T[], oldIndex: number, newIndex: number,
        count: number)
      parameters:
        - id: array
          type:
            - 'T[]'
          description: ''
        - id: oldIndex
          type:
            - number
          description: The index of the array element to move
        - id: newIndex
          type:
            - number
          description: The index of the array to insert the element at
        - id: count
          type:
            - number
          description: >
            The number of subsequent, contiguous elements to take with the
            oldIndex in the reorder
    module: VSS/Utils/Array
  - uid: vss-web-extension-sdk.VSS.Utils.Array.shallowEquals
    name: shallowEquals
    children: []
    type: function
    langs:
      - typeScript
    summary: Compares two arrays for member-wise equality.
    syntax:
      content: 'function shallowEquals(arrayA: any[], arrayB: any[])'
      parameters:
        - id: arrayA
          type:
            - 'any[]'
          description: First array to compare.
        - id: arrayB
          type:
            - 'any[]'
          description: Other array to compare.
      return:
        type:
          - boolean
    module: VSS/Utils/Array
  - uid: vss-web-extension-sdk.VSS.Utils.Array.sortIfNotSorted
    name: sortIfNotSorted
    children: []
    type: function
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function sortIfNotSorted<T>(array: T[], comparer: IComparer<T>)'
      parameters:
        - id: array
          type:
            - 'T[]'
          description: ''
        - id: comparer
          type:
            - '@vss-web-extension-sdk.IComparer<T>'
          description: ''
      return:
        type:
          - boolean
    module: VSS/Utils/Array
  - uid: vss-web-extension-sdk.VSS.Utils.Array.subtract
    name: subtract
    children: []
    type: function
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function subtract<T>(arrayA: T[], arrayB: T[], comparer?: IComparer<T>)'
      parameters:
        - id: arrayA
          type:
            - 'T[]'
          description: ''
        - id: arrayB
          type:
            - 'T[]'
          description: ''
        - id: comparer
          type:
            - '@vss-web-extension-sdk.IComparer<T>'
          description: ''
          optional: true
    module: VSS/Utils/Array
  - uid: vss-web-extension-sdk.VSS.Utils.Array.toDictionary
    name: toDictionary
    children: []
    type: function
    langs:
      - typeScript
    summary: Take an array of values and convert it to a dictionary/lookup table.
    syntax:
      content: >-
        function toDictionary<TArray>(array: TArray[], getKey: (item: TArray,
        index: number) => string, getValue?: (item: TArray, index: number) =>
        TValue, throwOnDuplicateKeys?: boolean)
      parameters:
        - id: array
          type:
            - 'TArray[]'
          description: Values to convert
        - id: getKey
          type:
            - '(item: TArray, index: number) => string'
          description: Function to get the key for a given item
        - id: getValue
          type:
            - '(item: TArray, index: number) => TValue'
          description: >-
            Optional function to get the value for a given item (defaults to the
            item itself)
          optional: true
        - id: throwOnDuplicateKeys
          type:
            - boolean
          description: >-
            Optional value indicating to throw an error when duplicate keys are
            present. Otherwise just overwrite any duplicates
          optional: true
      return:
        type:
          - '@vss-web-extension-sdk.IDictionaryStringTo<TValue>'
    module: VSS/Utils/Array
  - uid: vss-web-extension-sdk.VSS.Utils.Array.union
    name: union
    children: []
    type: function
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function union<T>(arrayA: T[], arrayB: T[], comparer?: IComparer<T>)'
      parameters:
        - id: arrayA
          type:
            - 'T[]'
          description: ''
        - id: arrayB
          type:
            - 'T[]'
          description: ''
        - id: comparer
          type:
            - '@vss-web-extension-sdk.IComparer<T>'
          description: ''
          optional: true
    module: VSS/Utils/Array
  - uid: vss-web-extension-sdk.VSS.Utils.Array.unique
    name: unique
    children: []
    type: function
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function unique<T>(array: T[], comparer?: IComparer<T>)'
      parameters:
        - id: array
          type:
            - 'T[]'
          description: ''
        - id: comparer
          type:
            - '@vss-web-extension-sdk.IComparer<T>'
          description: ''
          optional: true
    module: VSS/Utils/Array
  - uid: vss-web-extension-sdk.VSS.Utils.Array.uniqueSort
    name: uniqueSort
    children: []
    type: function
    langs:
      - typeScript
    summary: Sorts and removes duplicate elements
    syntax:
      content: 'function uniqueSort<T>(array: T[], comparer?: IComparer<T>)'
      parameters:
        - id: array
          type:
            - 'T[]'
          description: ''
        - id: comparer
          type:
            - '@vss-web-extension-sdk.IComparer<T>'
          description: ''
          optional: true
    module: VSS/Utils/Array
